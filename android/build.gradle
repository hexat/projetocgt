
int VERSION_CODE = 1
String VERSION_NAME = "1.0.0"
String APPID = "1.0.0"

Properties props = new Properties()
File prefsFile = new File("pref.properties")
if (prefsFile.exists()) {
    props.load(new FileInputStream(prefsFile))
    VERSION_NAME = props.getProperty("VERSION_NAME")
    VERSION_CODE = props.getProperty("VERSION_CODE")
    APPID = props.getProperty("APPID")
}



android {
    buildToolsVersion "21.1.2"
    compileSdkVersion 21


    //dependencies {
    //    compile fileTree(dir: 'libs/cgt', include: '*.jar')
    //}

    defaultConfig {
        applicationId APPID
        minSdkVersion 15
        targetSdkVersion 21
        versionCode VERSION_CODE
        versionName VERSION_NAME
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        instrumentTest.setRoot('tests')
    }
}

task copyToLibNatives(type: Copy) {
    into "libs/natives"
    from configurations.natives
}

task copyToLib(dependsOn: 'copyToLibNatives', type: Copy) {
    into "libs/cgt"
    from configurations.compile
}

task zip(dependsOn: 'copyToLib', type: Zip) {
    destinationDir = file('../ferramenta/res/bin/')
    from('.') {
        exclude '**/*build*'
    }
}

/**
 * Executed once at the beginning of any use of the gradle command with this build file.
 * takes the native dependencies of the natives configuration, and extracts them to the proper libs/ folders
 * so they get packed with the APK.
 */
task copyAndroidNatives() {
    configurations.natives.files.each { jar ->
        def outputDir = null
	if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

// sets up the Android Eclipse project, using the old Ant based build.
eclipse {
    // need to specify Java source sets explicitely, SpringSource Gradle Eclipse plugin
    // ignores any nodes added in classpath.file.withXml
    sourceSets {
        main {
            java.srcDirs "src", 'gen'
        }
    }

    jdt {
        sourceCompatibility = 1.8
    }

    classpath {
        plusConfigurations += [ project.configurations.compile ]
        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'
    }

    project {
        name = appName + "-android"
        natures 'com.android.ide.eclipse.adt.AndroidNature'
        buildCommands.clear();
        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
}

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src");
        scopes = [COMPILE: [plus: [project.configurations.compile]]]

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value: "true")
                        }
                    }
                }
            }
        }
    }
}

/*
task teste {
    String foor = '''<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">#</string>
</resources>
'''
    foor = foor.replace("#", props.getProperty("APK_NAME"))

    File file2 = new File('android/res/values/strings.xml')
    file2.delete()
    file2.createNewFile()
    file2.write(foor)
}

check.dependsOn(teste)
*/
